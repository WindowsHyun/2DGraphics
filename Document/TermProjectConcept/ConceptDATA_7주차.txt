1. 캐릭터의 X 좌표와 발판의 X 좌표를 비교를 하자.
	- class_data에서 비교 함수를 만들어서 비교완료!
	
2. 발판이 정확하게 충돌했는지 어떻게 구별할껀가?
	- 캐릭터의 y좌표와 발판의 y좌표를 비교한다.
	- 동시에 x좌표의 범위 안에 있는지 확인을 하게 한다.
	- 발판의 생성위치나 부분이 다 다르니깐, for문으로 돌리면서 계산을 해봐야겠다..!

3. 각각의 발판마다 기능이 다른데 어떻게 설정을 할까?
	- 발판마다 변수명을 다르게 하여서 해당 발판이 무슨 발판인지를 확인하게 해주자!

4. 코드가 엄청 길어질꺼 같은데 어떻게 하면 코드를 줄이면서 간략하게 할수 있을까?
	- 코드를 줄이는 방법도 좋긴 하지만, 코드를 다른 사람이 알아보기 쉽게 작업 하자!
	- 그러면서 줄일 수 있는 부분은 최대한 줄여보자..!

5. class_data에 무조건 클래스를 다 넣을 필요가 있을까?
	- game_main 에서만 고유하게 사용한다면 class_data에 넣어서 할필요가 없을꺼 같다.
	- 힘들게 class_data에 만들어서 넣으면 return과 post 할것들이 너무 많아진다..!

6. 변수명, 클래스명 정리를 하자.
	- 클래스 앞 은 항상 대문자
	- 함수등은 대문자를 쓸꺼면 항상 똑같이 다 적용
	- 변수명은 누가봐도 이것이 무엇을 하는지 알기 쉽게 설정
	- 클래스 파일에서 해당 값을 수정할 필요가 없는 함수면 _ 바를 붙이자!

7. 좀 더 직관적으로 알아볼 수 있게 코드를 수정하자.
	- 이건 진짜 많이 노력해봐야 하는데 계속 노력해보자..!

8. Json 을 어디에 활용할지 생각을 해보자..!
	- 내 게임에서는 발판을 json으로 불러오려면 너무 많은 줄수가 늘어난다.
	- 그러므로 메뉴의 위치등을 json으로 받아서 사용하자.
	- 처음 적어놓은 값이 계속 고정인 값들은 최대한 json을 활용하자.
	- json을 불러오는게 오히려 더 변수명이 길어지는 느낌이든다...